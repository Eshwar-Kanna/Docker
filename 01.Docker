Let’s Rock With Docker Together


Introduction


Docker is a tool introduced and developed by Kamel Faunadi, Solomen Hykes and Sebastian Pahl and Released on March 20, 2013.



Mostly there are four types of Platforms for installing and running software

Bare Metal
Virtualization
Cloud Computing
Containerization



Docker is an Open Source Containerization Platform. It enables developers to package applications into containers
Docker is a set of the platform as a service (PaaS) products that use OS -Level Virtualization to deliver software in package called Containers . The software that hosts the container is called Docker Engine.
Following Check Posts to be crossed for Entering the era of docker


Docker Setup

sudo yum install -y yum-utils

sudo yum-config-manager \
--add-repo \
https://download.docker.com/linux/rhel/docker-ce.repo

yum install docker- ce

systemctl start docker      ----->     this will start the docker service temporarily and terminates when the OS is shutdown

systemctl status docker     ----->     to check the status of the docker (Active/Inactive)

systemctl enable docker     ----->     To make the Docker service permanent which auto start the Service when you start the OS

docker info           ------>     For the docker software info and also confirm the existence of docker

docker ps       ------->    gives the containers info created in the docker

docker pull <image>       ------->      To download the image from the internet

ex: docker pull ubuntu:14.04 , docker pull centos

docker images      ------->     this gives you the images downloaded in the container

docker run -it — name mycentos centos     ------>  this command will start the container with a new shell or a bash shell “— name” option is used to provide the name for the container which helps in specifying from multiple containers

In the container “centos”  above launched, run the command “ifconfig” if fail then run a command

yum whatprovides ifconfig     ----->   this command displays the software that provides the ifconfig and installs in the container, “yum whatprovides <package>” helps in knowing the software that provides the required package or module.

setup webserver in the container

install webserver → yum install httpd
deploy web pages → cd /var/www/html/
and create a file in the folder with some data ex:kanna.html , extension must be “.html”

3. start webserver → /usr/sbin/httpd

to make the server permanent as systemctl enable here use command

vi /root/.bashrc/ and in any line of the document add /usr/sbin/httpd

Now find the ip address of container using ifconfig and use the syntax of

<ip>:<file> to access to the file using browser ex: 192.168.1.0:kanna.html

Note: the system should be in connection to the server physically to access.

Mounting

The files we create in the container will be lost when we terminate the container

to overcome such problem we use a concept called mount (-v) in which we create a folder in the base system (Linux) with required files in it and mount this folder to the container while launching this way we can mount to multiple containers rather than creating same data each time for every container we launch

docker run -it — name os1 -v /mydata:/data centos:latest

in above command os1- the name of the container, /mydata/ — folder created in the base system , /data/ — destination folder where the data mounted in centos

Creating own custom image

There are two methods for creating the custom image

1.  commit
2.  Dockerfile


creating an image using commit

docker run -it — name os2 centos: latest

yum install net-tools

yum install httpd

like the above format install all the packages needed and make all the changes accordingly in the container and then

docker commit os2 myimage:v1

In the commited container myimage:v1 we have all the changes we made and for further usage we can launch this container instead launching the new and further installing all required since we loss all the data in it when we terminate OS

we can also share this image to collegues to develop the code in team . we can share through mail,drive and also the best way is to upload in the dockerhub but we can only share the file with the extension of (.tar) to convert

docker save myimage:v1 -o (userid of docker hub)/myimage.tar

ex: docker save myimage:v1 -o kanna12/myimage.tar

to change the file name as required 

docker tag  <target name>   <desired name> 

initially log in to docker to upload file into docker hub

docker login

docker push kanna12/myimage.tar

To use this image or any other image from docker hub use pull command to download and then run the container

creating an image using Docker file

create a folder ex : /mydocker

cd /mydocker

vim Dockerfile

Inside the dockerfile write all the required commands and code

ex :

FROM centos

RUN yum install net-tools -y

RUN yum install httpd

WORKDIR /var/www/html/

RUN /usr/sbin/httpd

RUN echo welcome > kanna.html

After creating the Dockerfile then from the same folder in which the Dockerfile is created using the following command to build

docker build /mydocker -t myweb:v1

docker run -it --name B1  myweb:v1

hence the container is launched with all the requirements using the Dockerfile

Keyword in Dockerfile

FROM: It is used to define the base image, on which we will be building.
ADD: It is used to add files to the container being built. In simple terms, RUN is used to run commands and commits the result
RUN: It is used to add layers to the base image, by installing components.
CMD: It is used to run commands at the start of the container. These commands run only when there is no argument specified while running the container.
ENTRYPOINT: It is used to run commands during the container initialization process. You must use an ENTRYPOINT in your dockefile if you want to start a container automatically after building an image.
ENV: It is used to define environment variables in the container run-time.
EXPOSE: It is used to specify the listening port to enable networking at run time.
MAINTAINER: It is used to specify the name and email id of the image creator.
USER: It is used to specify the username used to run the container.
VOLUME: It is used to allow access from the container to the directory on the Docker host.
WORKDIR: It is used to specify the path of the command to be executed at run time.
LABEL: It is used to add labels to the docker image.
Creating a container gives the output of python file using Dockerfile

FROM centos

RUN yum install python3 -y

create a python file (my.py)in the same folder where dockerfile is created

COPY my.py /my.py

ENTRYPOINT [“python3” , “/my.py”]

CMD [“Kanna”]

To provide the server publicly for the devices which are not in physical connection we use the concept called PATING in which we launch the container with defining a specific port number .

docker run -it — name <name> -p 1234:80 myweb:v1

in above command 1234 is the port number we define randomly and the 80 is the port to which the server is connected, to access this server we use the format

<ip> :<port number>/file

ex 192.168.2.4:1234/kanna.html

‘ ’ Its Enough To Rock But Research More to Crack ’ ’
